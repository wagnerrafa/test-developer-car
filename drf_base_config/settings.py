"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import contextlib
import datetime
import os.path
import sys
from pathlib import Path
from urllib.parse import urlparse

from decouple import config
from dj_database_url import parse as db_parse
from django.core.management.utils import get_random_secret_key
from dotenv import load_dotenv

# warning rest_framework.W001:  You have specified a default PAGE_SIZE pagination rest_framework setting,
# without specifying also a DEFAULT_PAGINATION_CLASS. PAGINATION_CLASS is added dynamically according to whether the
# class is pagination or not
SILENCED_SYSTEM_CHECKS = ["rest_framework.W001", "staticfiles.W004"]

if "--env" in sys.argv and not str(sys.argv[sys.argv.index("--env") + 1].startswith("SCRIPT_NAME")):
    # get the index of the --env argument
    env_index = sys.argv.index("--env") + 1

    # load the .env file based on the specified environment
    env = sys.argv[env_index]
    env_file = f".env.{env}"

    if env not in ["dev", "prod", "hml", "azure"]:
        raise ValueError("Incorrect option to use the --env argument. The options are: dev, prod, hml, azure")

    if not os.path.exists(env_file):
        raise ValueError(f"Configuration file not found to: {env_file}")

    del sys.argv[env_index]
    del sys.argv[env_index - 1]
    load_dotenv(env_file)

else:
    load_dotenv()

# Variable definitions

PROJECT_ROOT = os.path.realpath(os.path.dirname(__file__))  # Caminho absoluto do diretório do projeto
PROJECT_NAME = os.path.basename(PROJECT_ROOT)  # Nome do diretório do projeto

APP_NAME = config("APP_NAME", default="app", cast=str)  # Nome da aplicação usado em URLs e configurações
USE_BASE_NAME = config("USE_BASE_NAME", cast=bool, default=True)  # Se deve usar o nome base da aplicação
PUBLIC_SWAGGER = config("PUBLIC_SWAGGER", cast=bool, default=False)  # Se a documentação Swagger deve ser pública
BASE_DIR_MAIN_APP = Path(__file__).resolve().parent.parent  # Diretório base da aplicação principal

if not os.path.exists(Path(__file__).resolve().parent.parent / "drf_base_apps"):
    BASE_DIR = Path(__file__).resolve().parent.parent  # Diretório base padrão
else:
    BASE_DIR = Path(__file__).resolve().parent.parent.parent.parent.parent.parent  # Diretório base para apps base
    MAIN_APP = False

DEBUG = config("DEBUG", default=False, cast=bool)  # Modo debug do Django
PRINT_DEBUG = config("PRINT_DEBUG", default=True, cast=bool)  # Se deve imprimir informações de debug
ENABLE_DRF = config("ENABLE_DRF", default=True, cast=bool)  # Se deve habilitar Django REST Framework
ENABLE_CACHE = config("ENABLE_CACHE", default=False, cast=bool)  # Se deve habilitar sistema de cache
SANDBOX_COMMIT = config("SANDBOX_COMMIT", default=True, cast=bool)  # Se deve usar commits sandbox

EXTERNAL_DATABASE = config("EXTERNAL_DATABASE", default=False, cast=bool)  # Se usa banco de dados externo
AUTO_REGISTER_MODELS = config(
    "AUTO_REGISTER_MODELS", default=False, cast=bool
)  # Se deve registrar modelos automaticamente
CURRENT_VERSION = config("CURRENT_VERSION", default="0.0.1", cast=str)  # Versão atual da aplicação

TOKEN_TEST = config("TOKEN_TEST", default="", cast=str)  # Token para execução de testes em ambientes controlados
LOGGER_TEST = config("LOGGER_TEST", default=False, cast=bool)  # Se deve habilitar logger específico para testes
ENVIRONMENT = config(
    "ENVIRONMENT", default=config("ENV", default="prod", cast=str), cast=str
).lower()  # Ambiente atual (prod/hml/dev)

if ENVIRONMENT not in ["prod", "hml", "dev"]:
    raise ValueError("Invalid ENVIRONMENT. Options is (prod, hml or dev)")

ENV_DEV = ENVIRONMENT == "dev"  # Se está em ambiente de desenvolvimento
LIST_ALLOWED_HOSTS = config("LIST_ALLOWED_HOSTS", default="", cast=str)  # Lista de hosts permitidos
HOSTS = LIST_ALLOWED_HOSTS.split(",") if LIST_ALLOWED_HOSTS else []  # Hosts permitidos como lista
PASSWD_DEV = config("PASSWD_DEV", cast=str, default="Senha@1234")  # Senha padrão para usuário dev
USER_DEV = config("USER_DEV", cast=str, default="dev_user")  # Usuário padrão para desenvolvimento
USER_ADM_DEV = config("USER_ADMIN_DEV", cast=str, default="dev_admin")  # Usuário admin padrão para desenvolvimento
FERNET_KEY = config(
    "FERNET_KEY", cast=str, default="ou5SAHd8fIj-gSLGyxPR5q8XraVD-_xlGGOtxpflOUQ="
).encode()  # Chave para criptografia Fernet

API_VERSION = config("API_VERSION", default="v1", cast=str)  # Versão da API REST

ENABLE_LOGGING_FILE = config(
    "ENABLE_LOGGING_FILE", default=not ENV_DEV, cast=bool
)  # Se deve habilitar logging em arquivo
LOGGING_FILE_LEVEL = config("LOGGING_FILE_LEVEL", default="INFO", cast=str)  # Nível de logging para arquivo

LOGGING_FILE_HANDLERS = config(
    "LOGGING_FILE_HANDLERS", default="debug,console,critical,info,error,warning,celery", cast=str
).split(
    ","
)  # Handlers de logging disponíveis

# Paths de urls que o back-end deve mapear, todas as outras irão ser redirecionadas para o front
PATHS_BACKEND = f"{config('PATHS_BACKEND', cast=str, default='')},api,static,admin,login,media,sobre,privacidade,home,{APP_NAME},/".split(
    ","
)
PATHS_BACKEND = [path for path in PATHS_BACKEND if path]  # Lista de caminhos que o backend deve processar

ENABLE_TOKEN = config("ENABLE_TOKEN", default=False, cast=bool)  # Se deve habilitar autenticação por token
ENABLE_PW = config("ENABLE_PW", default=ENV_DEV, cast=bool)  # Se deve habilitar autenticação por senha
# ENABLE_CSRF = config('ENABLE_CSRF', default=True, cast=bool)
ENABLE_CSRF = True  # Se deve habilitar proteção CSRF

# Novas configurações adicionadas
REQUEST_TIMEOUT = config("REQUEST_TIMEOUT", cast=int, default=30)  # Timeout padrão para requisições HTTP
CHECK_HAS_CHANGED_PASSWORD = config(
    "CHECK_HAS_CHANGED_PASSWORD", default=False, cast=bool
)  # Se deve verificar mudança de senha

# Application definition

INSTALLED_APPS = [
    # Django
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "django_extensions",
    "storages",
    "import_export",
    "rest_framework",
    "drf_api_logger",  # Save the request information in logs in the DB
    "drf_yasg",  # Swagger Schema
    "csp",
    # Novos apps adicionados
    "dalf",  # Django Admin List Filter - autocompletar para filtros
    "django_redis",
    "colorfield",
    # Core
    "drf_base_apps.core.abstract",
    "drf_base_apps.core.drf_base_user.apps.BaseUserConfig",
    "drf_base_apps.core.permission",
    "drf_base_apps.login_record",
]

PROJECT_INSTALLED_APPS = [
    # Core
    "apps.web_sockets",
]

AUTH_USER_MODEL = "drf_base_user.User"

SITE_ID = 1

MIDDLEWARE = [
    # FORTIFY: (Web Server Misconfiguration: Server Error Message)
    # FORTIFY: (HTML5: Cross-Site Scripting Protection)
    "drf_base_config.middleware.CacheControlMiddleware",
    # FORTIFY: (Web Server Misconfiguration: Insecure Content-Type Setting)
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "drf_base_config.middleware.CharsetMiddleware",
    # 'django.middleware.csrf.CsrfViewMiddleware',
    "drf_base_config.middleware.DisableCSRF",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "crum.CurrentRequestUserMiddleware",  # Get current request in Models
    "drf_api_logger.middleware.api_logger_middleware.APILoggerMiddleware",
    # Save the first occurrence of user login on the day
    "drf_base_apps.core.drf_base_user.middleware.LoginMiddleware",
    # Anonymous ID middleware - deve vir após SessionMiddleware
    "drf_base_config.middleware.AnonymousIdMiddleware",
    # FORTIFY: Django-CSP (HTML5: Misconfigured Content Security Policy)
    "csp.middleware.CSPMiddleware",
]

# Configurações adicionais do DRF API Logger para garantir logging em produção
DRF_API_LOGGER_DATABASE = True
DRF_API_LOGGER_SIGNAL = True

# Configurações para garantir que todos os requests sejam logados, independente de filtros
DRF_API_LOGGER_EXCLUDE_KEYS = []  # Não excluir nenhuma chave
DRF_API_LOGGER_SKIP_NAMESPACE = []  # Não pular nenhum namespace
DRF_API_LOGGER_SKIP_URL_NAME = [
    # Autenticação (SENHA, TOKEN, REFRESH TOKEN)
    "mobile_login",  # SENHA no payload
    "token_refresh",  # REFRESH TOKEN no payload
    "token_verify",  # TOKEN no payload
    "user-reset-password",  # SENHA no payload
    "user-reset-password-confirm",  # SENHA no payload
    "user-change-password",  # SENHA ATUAL e NOVA SENHA no payload
    # Criação/Edição de usuários (CPF, SENHA)
    "user-rh-create",  # CPF e SENHA no payload
    "user-clb-create",  # CPF e SENHA no payload
    "user-rh-edit",  # CPF no payload/response
    "user-clb-edit",  # CPF no payload/response
    # Dados pessoais (CPF)
    "user-me",  # CPF na response
    # Importação de funcionários (CPF)
    "employee-import-hr",  # CPF no payload
]
DRF_API_LOGGER_SKIP_VIEW_NAME = []  # Não pular nenhuma view no logging da API
DRF_API_LOGGER_SKIP_MODEL_NAME = []  # Não pular nenhum modelo no logging da API
DRF_API_LOGGER_SKIP_APP_NAME = []  # Não pular nenhum app no logging da API
DRF_API_LOGGER_SKIP_FULL_PATH = [
    "/favicon.ico",
    "/admin/",
    f"/{APP_NAME}/v1/admin/",
    "/v1/admin/",
    "/admin/jsi18n/",
    f"/{APP_NAME}/v1/admin/jsi18n/",
    "/healthz/livez/",
    "/healthz/readyz/",
    "/healthz/startupz/",
    "healthz/livez/",
    "healthz/readyz/",
    "healthz/startupz/",
    "/healthz/livez",
    "/healthz/readyz",
    "/healthz/startupz",
    "healthz/livez",
    "healthz/readyz",
    "healthz/startupz",
    f"/{APP_NAME}/healthz/livez/",
    f"/{APP_NAME}/healthz/readyz/",
    f"/{APP_NAME}/healthz/startupz/",
    f"/{APP_NAME}/healthz/livez",
    f"/{APP_NAME}/healthz/readyz",
    f"/{APP_NAME}/healthz/startupz",
]  # Caminhos específicos que devem ser pulados no logging da API
DRF_API_LOGGER_SKIP_IP = []  # Não pular nenhum IP no logging da API
DRF_API_LOGGER_SKIP_USER = []  # Não pular nenhum usuário no logging da API
DRF_API_LOGGER_SKIP_SESSION_KEY = []  # Não pular nenhuma sessão no logging da API

template = "templates"  # Diretório de templates

if "--keepdb" in sys.argv:  # Se deve manter o banco de dados durante testes
    db_test = {
        "ENGINE": "django.db.backends.sqlite3",  # Engine SQLite para testes
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),  # Caminho do banco SQLite
        "MIRROR": "default",  # Espelha a configuração padrão
    }

elif "pytest" not in sys.argv[0]:  # Se não é pytest
    db_test = {"MIRROR": "default"}  # Espelha a configuração padrão

else:  # Se é pytest
    db_test = {}  # Configuração vazia para pytest

try:
    has_test_env = "test" in sys.argv[1]  # Verifica se tem argumento de teste
except IndexError:
    has_test_env = False

TEST_ENV = config(
    "TEST_ENV", cast=bool, default="pytest" in sys.argv[0] or has_test_env
)  # Se está em ambiente de teste

if ENV_DEV:  # Configurações para ambiente de desenvolvimento
    SECRET_KEY = config("SECRET_KEY", cast=str, default="{{ secret_key }}")  # Chave secreta para desenvolvimento
    ALLOWED_HOSTS = ["*"]  # Permite todos os hosts em desenvolvimento

    if EXTERNAL_DATABASE:  # Se usa banco de dados externo
        DB_URL = config("DATABASE_URL")  # URL do banco de dados externo
        result = urlparse(DB_URL)  # Parse da URL do banco
        engine = result.scheme.split("+")[0]  # Engine do banco (postgresql, mysql, etc.)
        if engine == "mssql":  # Configuração específica para SQL Server
            port = result.port  # Porta do banco
            user = result.username  # Usuário do banco
            password = result.password  # Senha do banco
            DATABASES = {
                "default": {
                    "ENGINE": "mssql",  # Engine SQL Server
                    "NAME": result.path.strip("/"),  # Nome do banco
                    "HOST": result.hostname,  # Host do banco
                }
            }
            if port:  # Se tem porta definida
                DATABASES["default"]["PORT"] = str(port)  # Adiciona porta
            if user:  # Se tem usuário definido
                DATABASES["default"]["USER"] = user  # Adiciona usuário
            if password:  # Se tem senha definida
                DATABASES["default"]["PASSWORD"] = password  # Adiciona senha
            SQL_DRIVER_OPTIONS = config("SQL_DRIVER_OPTIONS", cast=str, default="")  # Opções do driver SQL
            if SQL_DRIVER_OPTIONS:  # Se tem opções de driver
                DATABASES["default"]["OPTIONS"] = {
                    "driver": SQL_DRIVER_OPTIONS,  # Define o driver
                }
        else:  # Para outros bancos (PostgreSQL, MySQL, etc.)
            DATABASES = {"default": config("DATABASE_URL", cast=db_parse)}  # Usa parser padrão
    else:  # Se usa banco local
        DATABASES = {
            "default": {"ENGINE": "django.db.backends.sqlite3", "NAME": os.path.join(BASE_DIR, "db.sqlite3")}
        }  # SQLite local
else:  # Configurações para ambiente de produção/homologação
    ALLOWED_HOSTS = HOSTS  # Lista de hosts permitidos
    SECRET_KEY = config("SECRET_KEY", cast=str, default=get_random_secret_key())  # Chave secreta aleatória
    SESSION_COOKIE_SECURE = True  # Cookies de sessão seguros (HTTPS)
    CSRF_COOKIE_SECURE = True  # Cookies CSRF seguros (HTTPS)
    SECURE_BROWSER_XSS_FILTER = True  # Filtro XSS do navegador
    SECURE_CONTENT_TYPE_NOSNIFF = True  # Previne sniffing de tipo de conteúdo
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_REDIRECT_EXEMPT = [r"^/$", ""]
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    CSRF_TRUSTED_ORIGINS = [f"https://{host}" for host in ALLOWED_HOSTS] + [f"wss://{host}" for host in ALLOWED_HOSTS]

    DATABASES = {"default": config("DATABASE_URL", cast=db_parse)}

    # FORTIFY: Django-CSP (HTML5: Misconfigured Content Security Policy)
    from csp.constants import SELF

    # ALLOWED_CSP = [f"*{host}" if host.startswith(".") else f"{host}" for host in ALLOWED_HOSTS]
    ALLOWED_CSP = [f"https://{host}" for host in ALLOWED_HOSTS]

    # URLs comuns para todas as fontes
    COMMON_CSP_SOURCES = []

    COMMON_CSP_FONT = [
        "https://fonts.googleapis.com",
        "https://fonts.gstatic.com",
        "https://fonts.gstatic.com/",
        "https://*.gstatic.com",
        "https://fonts.gstatic.com/s/inter/v18/",
    ]
    COMMON_CSP_STYLE = [
        "https://unpkg.com/swagger-ui-dist@5.10.5/",
        "https://unpkg.com/swagger-ui-dist",
        "https://fonts.googleapis.com",
        "https://fonts.gstatic.com",
        "https://*.gstatic.com",
    ]
    COMMON_CSP_CONNECT = [
        "https://fonts.googleapis.com",
        "https://fonts.gstatic.com",
        "https://*.gstatic.com",
    ]

    # Definindo as políticas CSP com as URLs comuns
    CONTENT_SECURITY_POLICY = {
        "DIRECTIVES": {
            "default-src": [SELF, *COMMON_CSP_SOURCES, *ALLOWED_CSP],
            "script-src": [SELF, *COMMON_CSP_SOURCES, *ALLOWED_CSP],
            "style-src": [SELF, *COMMON_CSP_STYLE, *ALLOWED_CSP],
            "font-src": [*COMMON_CSP_FONT, *ALLOWED_CSP],
            "img-src": [SELF, "data:", *COMMON_CSP_SOURCES, *ALLOWED_CSP],
            "connect-src": [SELF, *COMMON_CSP_CONNECT, *ALLOWED_CSP, *[f"wss://{host}" for host in ALLOWED_HOSTS]],
            "media-src": [SELF, *COMMON_CSP_SOURCES, *ALLOWED_CSP],
            "object-src": [SELF, *COMMON_CSP_SOURCES, *ALLOWED_CSP],
            "frame-ancestors": [SELF, *COMMON_CSP_SOURCES, *ALLOWED_CSP],
            "form-action": [SELF, *COMMON_CSP_SOURCES, *ALLOWED_CSP],
        }
    }

CSRF_TRUSTED_ORIGINS = [f"https://{host}" for host in ALLOWED_HOSTS] + [f"wss://{host}" for host in ALLOWED_HOSTS]

# FORTIFY: Expiration time disabled due to medium error in fortify (Cookie Security: Persistent Cookie)
CSRF_COOKIE_AGE = None
# Whether to save the session data on every request.
SESSION_SAVE_EVERY_REQUEST = True
# Whether a user's session cookie expires when the web browser is closed.
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
# Use default lax pattern to allow extracting cookies from SSO login
# SESSION_COOKIE_SAMESITE = 'Strict'

# FORTIFY: Active Cookies HttpOnly (Cookie Security: HTTPOnly not Set)
LANGUAGE_COOKIE_HTTPONLY = True

# Use default False to allow front get csrftoken
CSRF_COOKIE_HTTPONLY = False
SESSION_COOKIE_PATH = "/;HttpOnly"

LOGGING_FORMAT_SIMPLE = config(
    "LOGGING_FORMAT_SIMPLE", cast=str, default="[%(levelname)s] %(asctime)s - %(name)s - %(message)s"
)
LOGGING_FORMAT_VERBOSE = config(
    "LOGGING_FORMAT_VERBOSE", cast=str, default="[%(levelname)s] %(asctime)s - %(" "message)s"
)
worker_hijack_root_logger = False  # Isso impede que o Celery sobrescreva o logger root.

if ENABLE_LOGGING_FILE:
    if "log_viewer" not in INSTALLED_APPS:
        INSTALLED_APPS.append("log_viewer")
        INSTALLED_APPS.append("drf_base_apps.custom_log_viewer")

    path_file_logs = os.path.join(BASE_DIR, "log")

    file_handlers = ["critical", "info", "error", "warning"]
    has_file_handlers = any(handler in LOGGING_FILE_HANDLERS for handler in file_handlers)

    if has_file_handlers:
        os.makedirs(path_file_logs, exist_ok=True)
    file_log = os.path.join(path_file_logs, str(datetime.datetime.now().date()) + "_{}.log")

    handlers = {
        "console": {
            "class": "logging.StreamHandler",
            "level": "DEBUG",
            "formatter": "simple",
            "stream": "ext://sys.stdout",
        }
    }

    # Adiciona handlers de arquivo apenas se estiverem na lista LOGGING_FILE_HANDLERS
    if "debug" in LOGGING_FILE_HANDLERS:
        handlers["debug"] = {
            "class": "drf_base_apps.handler.LevelSpecificFileHandler",
            "level": "DEBUG",
            "custom_level": "DEBUG",
            "formatter": "verbose",
            "filename": file_log.format("debug"),
        }
    if "critical" in LOGGING_FILE_HANDLERS:
        handlers["critical"] = {
            "class": "drf_base_apps.handler.LevelSpecificFileHandler",
            "level": "CRITICAL",
            "custom_level": "CRITICAL",
            "formatter": "verbose",
            "filename": file_log.format("critical"),
        }
    if "error" in LOGGING_FILE_HANDLERS:
        handlers["error"] = {
            "class": "drf_base_apps.handler.LevelSpecificFileHandler",
            "level": "ERROR",
            "custom_level": "ERROR",
            "formatter": "verbose",
            "filename": file_log.format("error"),
        }
    if "info" in LOGGING_FILE_HANDLERS:
        handlers["info"] = {
            "class": "drf_base_apps.handler.LevelSpecificFileHandler",
            "level": "INFO",
            "custom_level": "INFO",
            "formatter": "verbose",
            "filename": file_log.format("info"),
        }
    if "warning" in LOGGING_FILE_HANDLERS:
        handlers["warning"] = {
            "class": "drf_base_apps.handler.LevelSpecificFileHandler",
            "level": "WARNING",
            "custom_level": "WARNING",
            "formatter": "verbose",
            "filename": file_log.format("warning"),
        }
    if "celery" in LOGGING_FILE_HANDLERS:
        handlers["celery"] = {
            "class": "drf_base_apps.handler.LevelSpecificFileHandler",
            "level": "DEBUG",
            "custom_level": "DEBUG",
            "formatter": "verbose",
            "filename": file_log.format("celery"),
        }

    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {"simple": {"format": LOGGING_FORMAT_SIMPLE}, "verbose": {"format": LOGGING_FORMAT_VERBOSE}},
        "handlers": handlers,
        "loggers": {
            "root": {
                "handlers": LOGGING_FILE_HANDLERS,
                "level": LOGGING_FILE_LEVEL,
                "propagate": True,
            },
            "": {
                "handlers": LOGGING_FILE_HANDLERS,
                "level": LOGGING_FILE_LEVEL,
                "propagate": False,
            },
            "django": {
                "handlers": LOGGING_FILE_HANDLERS,
                "level": LOGGING_FILE_LEVEL,
                "propagate": False,
            },
            "django.request": {  # capturar logs relacionados a requisições HTTP
                "handlers": LOGGING_FILE_HANDLERS,
                "level": LOGGING_FILE_LEVEL,
                "propagate": False,
            },
            "django.utils.autoreload": {  # capturar logs relacionados a requisições HTTP
                "handlers": LOGGING_FILE_HANDLERS,
                "level": "ERROR",
                "propagate": False,
            },
            "werkzeug": {  # capturar logs do runser_plus,
                "handlers": LOGGING_FILE_HANDLERS,
                "level": LOGGING_FILE_LEVEL,
                "propagate": False,
            },
            "celery": {
                "handlers": LOGGING_FILE_HANDLERS,  # Usando os mesmos handlers que para o root ou outros loggers
                "level": LOGGING_FILE_LEVEL,
                "propagate": False,
            },
        },
    }
    LOG_VIEWER_FILES_PATTERN = "*.log*"
    LOG_VIEWER_FILES_DIR = path_file_logs
    LOG_VIEWER_PAGE_LENGTH = 25  # total log lines per-page
    LOG_VIEWER_MAX_READ_LINES = 1000  # total log lines will be read
    LOG_VIEWER_FILE_LIST_MAX_ITEMS_PER_PAGE = 25  # Max log files loaded in Datatable per page
    LOG_VIEWER_PATTERNS = ["[INFO]", "[DEBUG]", "[WARNING]", "[ERROR]", "[CRITICAL]"]
    LOG_VIEWER_EXCLUDE_TEXT_PATTERN = None  # String regex expression to exclude the log from line
    LOG_VIEWER_FILE_LIST_TITLE = APP_NAME

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

GET_VENV = config("GET_VENV", default=True, cast=bool)
STATIC_FILES = config("STATIC_FILES", default="", cast=str).split(",")
STATIC_FILES = [static for static in STATIC_FILES if static]
STATIC_NAME = "static"

STATIC_ROOT = os.path.join(BASE_DIR_MAIN_APP, "var", "static_root")
STATIC_DIR = os.path.join(BASE_DIR_MAIN_APP, APP_NAME, "static")
statics = [
    os.path.join(BASE_DIR_MAIN_APP, STATIC_NAME),
    os.path.join(BASE_DIR_MAIN_APP, "drf_base_apps", "base_django_static"),
]
if STATIC_FILES:
    for file in STATIC_FILES:
        statics.append(os.path.join(BASE_DIR_MAIN_APP, file))
STATICFILES_DIRS = statics

MEDIA_ROOT = os.path.join(BASE_DIR_MAIN_APP, "media")

ROOT_URLCONF = f"{PROJECT_NAME}.urls"

dirs = [
    os.path.join(BASE_DIR, STATIC_NAME, "src", "vue", "dist"),
    os.path.join(BASE_DIR, "drf_base_apps", template),
    os.path.join(BASE_DIR_MAIN_APP, "drf_base_apps", template),
]
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": dirs,
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en"

TIME_ZONE = "America/Sao_Paulo"

USE_I18N = True

USE_TZ = True

LOCALE_PATHS = [
    Path(__file__).resolve().parent.parent.parent.parent.parent.parent / "locale",
    Path(__file__).resolve().parent.parent / "drf_base_apps" / "locale",
]
DEFAULT_PERMISSIONS_PATH = config(
    "DEFAULT_PERMISSIONS_PATH",
    default=Path(__file__).resolve().parent.parent
    / "drf_base_apps"
    / "core"
    / "abstract"
    / "fixtures"
    / "default_permissions.json",
    cast=str,
)


def gettext(s):
    """Função de tradução para internacionalização."""
    return s


LANGUAGES = (
    ("pt-br", gettext("Português")),
    ("en", gettext("English")),
)

MODELTRANSLATION_DEFAULT_LANGUAGE = "pt-br"

MODELTRANSLATION_LANGUAGES = ("en", "pt-br")

TEMPLATE_CONTEXT_PROCESSORS = ("django.template.context_processors.i18n",)

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

if USE_BASE_NAME:  # Se deve usar o nome base da aplicação nas URLs
    BASE_URL = f"{APP_NAME}/{API_VERSION}/"  # URL base da aplicação com versão
    BASE_API_URL = f"{APP_NAME}/api/{API_VERSION}/"  # URL base da API com versão
    STATIC_URL = f"{APP_NAME}/{STATIC_NAME}/"  # URL para arquivos estáticos
    MEDIA_URL = f"{APP_NAME}/media/"  # URL para arquivos de mídia
    LOGIN_URL = f"{APP_NAME}/login/"  # URL de login
    LOGOUT_URL = f"{APP_NAME}/logout/"  # URL de logout
else:  # Se não usar nome base
    FORCE_SCRIPT_NAME = f"/{APP_NAME}/"  # Força nome do script na URL
    API_BASE_PATH = f"/{APP_NAME}/"  # Subpath base para todas as chamadas da API
    BASE_URL = f"{API_VERSION}/"  # URL base sem nome da aplicação
    BASE_API_URL = f"api/{API_VERSION}/"  # URL base da API sem nome da aplicação
    STATIC_URL = f"{STATIC_NAME}/"  # URL para arquivos estáticos
    MEDIA_URL = "media/"  # URL para arquivos de mídia
    LOGIN_URL = "login/"  # URL de login
    LOGOUT_URL = "logout/"  # URL de logout

if ENV_DEV:  # URLs de redirecionamento para desenvolvimento
    LOGOUT_REDIRECT_URL = f"/{APP_NAME}/api/{API_VERSION}/docs/swagger/"  # Redireciona para Swagger após logout
    LOGIN_REDIRECT_URL = f"/{APP_NAME}/api/{API_VERSION}/docs/swagger/"  # Redireciona para Swagger após login
else:  # URLs de redirecionamento para produção
    LOGOUT_REDIRECT_URL = f"/{APP_NAME}/"  # Redireciona para home após logout
    LOGIN_REDIRECT_URL = f"/{APP_NAME}/"  # Redireciona para home após login

ASGI_APPLICATION = f"{PROJECT_NAME}.asgi.application"  # Aplicação ASGI

SWAGGER_URL = f"/{BASE_API_URL}docs/redoc/"  # URL da documentação Swagger/ReDoc

DEFAULT_AUTHENTICATION_CLASSES = [
    "rest_framework.authentication.SessionAuthentication",  # Autenticação por sessão padrão
]

if ENABLE_TOKEN:  # Se autenticação por token está habilitada
    INSTALLED_APPS.append("rest_framework_simplejwt")  # Adiciona app JWT
    DEFAULT_AUTHENTICATION_CLASSES.append(
        "rest_framework_simplejwt.authentication.JWTAuthentication"
    )  # Adiciona autenticação JWT

    MIDDLEWARE.append("corsheaders.middleware.CorsMiddleware")  # Adiciona middleware CORS
    INSTALLED_APPS.append("corsheaders")  # Adiciona app CORS
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:8080",
        "https://0.0.0.0:5173",
        "https://localhost:5173",
    ]  # Origens permitidas para CORS
    CORS_ALLOW_ALL_ORIGINS = True  # Permite todas as origens para CORS
    CORS_ALLOW_CREDENTIALS = True  # Permite credenciais no CORS

REST_FRAMEWORK = {
    # Setting Global permissions, to require authentication
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",  # Permissão padrão: usuário autenticado
    ],
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.ScopedRateThrottle",  # Throttling por escopo
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": DEFAULT_AUTHENTICATION_CLASSES,  # Classes de autenticação padrão
    "TEST_REQUEST_RENDERER_CLASSES": [
        "rest_framework.renderers.MultiPartRenderer",  # Renderer para testes multipart
        "rest_framework.renderers.JSONRenderer",  # Renderer para testes JSON
        "rest_framework.renderers.TemplateHTMLRenderer",  # Renderer para testes HTML
    ],
    "DEFAULT_RENDERER_CLASSES": (
        "rest_framework.renderers.JSONRenderer",  # Renderer padrão JSON
        "rest_framework.renderers.BrowsableAPIRenderer",  # Renderer para navegador
    ),
    "PAGE_SIZE": 30,  # Tamanho padrão da página na paginação
    "EXCEPTION_HANDLER": "drf_base_apps.exception.exception_handler",  # Handler customizado de exceções
}

if ENABLE_DRF:  # Se DRF está habilitado
    INSTALLED_APPS.append("drf_standardized_errors")  # Adiciona app para erros padronizados
    REST_FRAMEWORK["EXCEPTION_HANDLER"] = (
        "drf_base_apps.drf_exception.drf_standardized_handler"  # Handler padronizado de exceções
    )
    DRF_STANDARDIZED_ERRORS = {"ENABLE_IN_DEBUG_FOR_UNHANDLED_EXCEPTIONS": True}  # Habilita erros padronizados em debug

# Configurações do JWT
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": datetime.timedelta(minutes=60),  # Tempo de vida do token de acesso (60 min)
    "REFRESH_TOKEN_LIFETIME": datetime.timedelta(days=1),  # Tempo de vida do token de refresh (1 dia)
    "ROTATE_REFRESH_TOKENS": False,  # Não rotaciona tokens de refresh automaticamente
    "BLACKLIST_AFTER_ROTATION": True,  # Adiciona tokens antigos à blacklist após rotação
    "UPDATE_LAST_LOGIN": False,  # Não atualiza último login automaticamente
    "ALGORITHM": "HS256",  # Algoritmo de assinatura (HMAC SHA256)
    "SIGNING_KEY": SECRET_KEY,  # Chave para assinar tokens
    "VERIFYING_KEY": None,  # Chave para verificar tokens (None = usa SIGNING_KEY)
    "AUDIENCE": None,  # Audiência do token (None = não verifica)
    "ISSUER": None,  # Emissor do token (None = não verifica)
    "AUTH_HEADER_TYPES": ("Bearer",),  # Tipos de header de autorização
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",  # Nome do header de autorização
    "USER_ID_FIELD": "id",  # Campo do usuário para identificar
    "USER_ID_CLAIM": "user_id",  # Claim JWT para ID do usuário
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "JTI_CLAIM": "jti",
}

# Configurações do S3
AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY_ID", default="")
AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY", default="")
AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME", default="")
AWS_S3_REGION_NAME = config("AWS_S3_REGION_NAME", default="us-east-1")
AWS_SES_REGION_NAME = config("AWS_SES_REGION_NAME", default=AWS_S3_REGION_NAME)
AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None
AWS_S3_VERIFY = True
AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
AWS_S3_OBJECT_PARAMETERS = {
    "CacheControl": "max-age=86400",
}

if AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY:
    # Configuração do storage na aws
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    AWS_LOCATION = STATIC_URL
    AWS_S3_OBJECT_PARAMETERS = {
        "CacheControl": "max-age=86400",
    }
    STORAGES = {
        "default": {
            "BACKEND": STATICFILES_STORAGE,
        },
        "staticfiles": {
            "BACKEND": STATICFILES_STORAGE,
        },
    }

# Caches
# https://docs.djangoproject.com/en/4.2/topics/cache/

channel_redis_cache = config("REDIS_URL", default="")

if channel_redis_cache:
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": channel_redis_cache,
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
            },
        }
    }

else:
    if not DEBUG:
        CACHES = {
            "default": {
                "BACKEND": "django.core.cache.backends.db.DatabaseCache",
                "LOCATION": "django_app_cache_table",
            },
        }
    else:
        CACHES = {
            "default": {
                "BACKEND": "django.core.cache.backends.dummy.DummyCache",
            }
        }

# Custom Test Runner
TEST_RUNNER = "drf_base_apps.test_runner.CustomTestRunner"
with contextlib.suppress(NameError):
    DATABASES["default"]["TEST"] = db_test
