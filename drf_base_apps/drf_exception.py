"""
Custom Exception Handling Module.

This module provides a custom exception handler for Django and Django REST Framework applications.
It handles Django's ValidationError and REST Framework's ValidationError by adapting them into
a common adapter class, ValidationErrorAdapter, before passing them to the DRF's default exception
handler (exception_handler) for consistent error responses.

Classes and Functions:
- ValidationErrorAdapter: Adapter class to transform Django's and DRF's ValidationError into a
  common format.
- exception_handler: Custom exception handler function that adapts Django's and DRF's ValidationErrors
  using ValidationErrorAdapter and delegates to DRF's exception_handler.

Usage:
Import and configure this module in Django settings to override the default exception handling
behavior for ValidationError types across your Django and DRF views.

Example:
    # settings.py
    REST_FRAMEWORK = {
        'EXCEPTION_HANDLER': 'path.to.this.module.exception_handler',
    }

"""

from drf_standardized_errors.handler import exception_handler


def drf_standardized_handler(exc, context):
    """
    Handle custom exceptions for Django and Django REST Framework applications.

    This function intercepts Django's ValidationError and REST Framework's ValidationError
    exceptions. If the exception is of type DjangoValidationError or DRFValidationError,
    it adapts it using ValidationErrorAdapter before delegating the handling to DRF's
    default exception_handler.

    Args:
        exc (Exception): The exception object raised during request processing.
        context (dict): Contextual information about the exception, typically includes
          the request and view information.

    Returns:
        Response: An instance of Response generated by DRF's exception_handler after
          handling the adapted exception.

    """
    return exception_handler(exc=exc, context=context)
